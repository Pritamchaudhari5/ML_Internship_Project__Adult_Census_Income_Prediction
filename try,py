# ... (import statements)
import joblib
import numpy as np
import pandas as pd
from flask import Flask, render_template, request
import logging
from sklearn.preprocessing import LabelEncoder
import pickle

dataset = pd.read_csv(r"D:\Intern projects\ML_Internship_Project__Adult_Census_Income_Prediction\Adult_Census_Income_Data\adult.csv")


app = Flask(__name__)

# Load the model
model = pickle.load(open('model.pkl', 'rb'))

# ... (data preprocessing, balancing, and scaling)
dataset.drop_duplicates(inplace=True)
dataset['country'] = dataset['country'].replace(' ?',np.nan)
dataset['workclass'] = dataset['workclass'].replace(' ?',np.nan)
dataset['occupation'] = dataset['occupation'].replace(' ?',np.nan)
dataset.dropna(how='any',inplace=True)

for dataset in [dataset]:
    dataset.loc[dataset['country'] != ' United-States', 'country'] = 0
    dataset.loc[dataset['country'] == ' United-States', 'country'] = 1
    dataset.loc[dataset['race'] != ' White', 'race'] = 0
    dataset.loc[dataset['race'] == ' White', 'race'] = 1
    dataset.loc[dataset['workclass'] != ' Private', 'workclass'] = 0
    dataset.loc[dataset['workclass'] == ' Private', 'workclass'] = 1
    dataset.loc[dataset['hours-per-week'] <= 40, 'hours-per-week'] = 0
    dataset.loc[dataset['hours-per-week'] > 40, 'hours-per-week'] = 1

# Create LabelEncoder instance for categorical variables
categorical_features = ['Marital Status', 'Workclass', 'Occupation Code', 'Relationship', 'Race', 'Sex', 'Country']
label_encoders = {}
for feature in categorical_features:
    le = LabelEncoder()
    dataset[feature] = le.fit_transform(dataset[feature])
    label_encoders[feature] = le

@app.route('/')
def home():
    return render_template('index.html', unique_values=label_encoders)

@app.route('/predict', methods=['POST'])
def predict():
    # ... (user input processing)

    features = [age_value, workclass_val, fnlwgt, edu_num_value, marital_value, 
                occupation_value, relationship_value, race_val, sex_val, capital_gain,
                capital_loss, hours_value, country_val]

    int_features = [int(x) for x in features]
    final_features = [np.array(int_features)]
    prediction = model.predict(scaler.transform(final_features))

    if prediction == 1:
        output = "Income is more than 50K"
    elif prediction == 0:
        output = "Income is less than 50K"

    return render_template('index.html', prediction_text='{}'.format(output))

if __name__ == "__main__":
    app.run(debug=True)
